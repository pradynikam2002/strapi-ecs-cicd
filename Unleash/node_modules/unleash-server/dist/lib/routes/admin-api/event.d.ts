import type { Response } from 'express';
import type { IUnleashConfig } from '../../types/option.js';
import type { IUnleashServices } from '../../services/index.js';
import type { IEvent } from '../../events/index.js';
import Controller from '../controller.js';
import { type EventsSchema } from '../../../lib/openapi/spec/events-schema.js';
import { type FeatureEventsSchema } from '../../../lib/openapi/spec/feature-events-schema.js';
import type { IAuthRequest } from '../unleash-types.js';
import { type ProjectFlagCreatorsSchema } from '../../openapi/index.js';
export default class EventController extends Controller {
    private eventService;
    private flagResolver;
    private openApiService;
    constructor(config: IUnleashConfig, { eventService, openApiService, }: Pick<IUnleashServices, 'eventService' | 'openApiService'>);
    maybeAnonymiseEvents(events: IEvent[]): IEvent[];
    getEvents(req: IAuthRequest<any, any, any, {
        project?: string;
    }>, res: Response<EventsSchema>): Promise<void>;
    getEventsForToggle(req: IAuthRequest<{
        featureName: string;
    }>, res: Response<FeatureEventsSchema>): Promise<void>;
    getEventCreators(req: IAuthRequest, res: Response<ProjectFlagCreatorsSchema>): Promise<void>;
}
//# sourceMappingURL=event.d.ts.map