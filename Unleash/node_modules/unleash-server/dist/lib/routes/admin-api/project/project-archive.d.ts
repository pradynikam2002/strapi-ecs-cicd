import type { Response } from 'express';
import type { IUnleashConfig } from '../../../types/option.js';
import { type IProjectParam } from '../../../types/index.js';
import type { IAuthRequest } from '../../unleash-types.js';
import { type BatchFeaturesSchema } from '../../../openapi/index.js';
import Controller from '../../controller.js';
import type { IUnleashServices } from '../../../services/index.js';
export default class ProjectArchiveController extends Controller {
    private readonly logger;
    private featureService;
    private transactionalFeatureToggleService;
    private openApiService;
    private flagResolver;
    constructor(config: IUnleashConfig, { transactionalFeatureToggleService, featureToggleService, openApiService, }: Pick<IUnleashServices, 'transactionalFeatureToggleService' | 'featureToggleService' | 'openApiService'>);
    deleteFeatures(req: IAuthRequest<IProjectParam, any, BatchFeaturesSchema>, res: Response<void>): Promise<void>;
    reviveFeatures(req: IAuthRequest<IProjectParam, any, BatchFeaturesSchema>, res: Response<void>): Promise<void>;
    archiveFeatures(req: IAuthRequest<IProjectParam, void, BatchFeaturesSchema>, res: Response): Promise<void>;
    validateArchiveFeatures(req: IAuthRequest<IProjectParam, void, BatchFeaturesSchema>, res: Response): Promise<void>;
}
//# sourceMappingURL=project-archive.d.ts.map