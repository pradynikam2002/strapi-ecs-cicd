import type { IUnleashStores } from '../types/stores.js';
import type { IUnleashConfig } from '../types/option.js';
import type { IProject, IProjectHealthReport } from '../types/model.js';
import type ProjectService from '../features/project/project-service.js';
export default class ProjectHealthService {
    private logger;
    private projectStore;
    private featureTypeStore;
    private featureToggleStore;
    private projectService;
    calculateHealthRating: (project: Pick<IProject, 'id'>) => Promise<number>;
    private timer;
    constructor({ projectStore, featureTypeStore, featureToggleStore, }: Pick<IUnleashStores, 'projectStore' | 'featureTypeStore' | 'featureToggleStore'>, { getLogger, eventBus }: Pick<IUnleashConfig, 'getLogger' | 'eventBus'>, projectService: ProjectService);
    getProjectHealthReport(projectId: string): Promise<IProjectHealthReport>;
    setHealthRating(batchSize?: number): Promise<void>;
    setProjectHealthRating(projectId: string): Promise<void>;
}
//# sourceMappingURL=project-health-service.d.ts.map