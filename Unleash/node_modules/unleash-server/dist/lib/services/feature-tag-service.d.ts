import type { IUnleashStores } from '../types/stores.js';
import { type IAuditUser, type IUnleashConfig } from '../types/index.js';
import type EventService from '../features/events/event-service.js';
import type { ITag } from '../tags/index.js';
declare class FeatureTagService {
    private tagStore;
    private featureTagStore;
    private featureToggleStore;
    private eventService;
    private logger;
    constructor({ tagStore, featureTagStore, featureToggleStore, }: Pick<IUnleashStores, 'tagStore' | 'featureTagStore' | 'featureToggleStore'>, { getLogger }: Pick<IUnleashConfig, 'getLogger'>, eventService: EventService);
    listTags(featureName: string): Promise<ITag[]>;
    listFeatures(tagValue: string): Promise<string[]>;
    addTag(featureName: string, tag: ITag, auditUser: IAuditUser): Promise<ITag>;
    updateTags(featureNames: string[], addedTags: ITag[], removedTags: ITag[], auditUser: IAuditUser): Promise<void>;
    createTagIfNeeded(tag: ITag, auditUser: IAuditUser): Promise<void>;
    removeTag(featureName: string, tag: ITag, auditUser: IAuditUser): Promise<void>;
}
export default FeatureTagService;
//# sourceMappingURL=feature-tag-service.d.ts.map