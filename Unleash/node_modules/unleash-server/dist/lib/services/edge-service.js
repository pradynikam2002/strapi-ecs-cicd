import metricsHelper from '../util/metrics-helper.js';
import { FUNCTION_TIME } from '../metric-events.js';
export default class EdgeService {
    constructor({ apiTokenService }, { getLogger, eventBus, }) {
        this.logger = getLogger('lib/services/edge-service.ts');
        this.apiTokenService = apiTokenService;
        this.timer = (functionName) => metricsHelper.wrapTimer(eventBus, FUNCTION_TIME, {
            className: 'EdgeService',
            functionName,
        });
    }
    async getValidTokens(tokens) {
        const stopTimer = this.timer('validateTokensWithCache');
        // new behavior: use cached tokens when possible
        // use the db to fetch the missing ones
        // cache stores both missing and active so we don't hammer the db
        const validatedTokens = [];
        for (const token of tokens) {
            const found = await this.apiTokenService.getTokenWithCache(token);
            if (found) {
                validatedTokens.push({
                    token: token,
                    type: found.type,
                    projects: found.projects,
                });
            }
        }
        stopTimer();
        return { tokens: validatedTokens };
    }
}
//# sourceMappingURL=edge-service.js.map