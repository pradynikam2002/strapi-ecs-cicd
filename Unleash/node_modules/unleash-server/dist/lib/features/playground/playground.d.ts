import type { Request, Response } from 'express';
import type { IUnleashConfig } from '../../types/option.js';
import type { IUnleashServices } from '../../services/index.js';
import Controller from '../../routes/controller.js';
import { type PlaygroundResponseSchema } from '../../openapi/spec/playground-response-schema.js';
import type { PlaygroundRequestSchema } from '../../openapi/spec/playground-request-schema.js';
import type { AdvancedPlaygroundRequestSchema } from '../../openapi/spec/advanced-playground-request-schema.js';
import type { AdvancedPlaygroundResponseSchema } from '../../openapi/spec/advanced-playground-response-schema.js';
import type { IAuthRequest } from '../../routes/unleash-types.js';
export default class PlaygroundController extends Controller {
    private openApiService;
    private playgroundService;
    private flagResolver;
    constructor(config: IUnleashConfig, { openApiService, playgroundService, }: Pick<IUnleashServices, 'openApiService' | 'playgroundService'>);
    evaluateContext(req: Request<any, any, PlaygroundRequestSchema>, res: Response<PlaygroundResponseSchema>): Promise<void>;
    evaluateAdvancedContext(req: IAuthRequest<any, any, AdvancedPlaygroundRequestSchema>, res: Response<AdvancedPlaygroundResponseSchema>): Promise<void>;
}
//# sourceMappingURL=playground.d.ts.map