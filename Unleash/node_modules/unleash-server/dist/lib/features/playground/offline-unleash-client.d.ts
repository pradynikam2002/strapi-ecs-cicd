import type { SdkContextSchema } from '../../openapi/spec/sdk-context-schema.js';
import { FeatureEvaluator } from './feature-evaluator/index.js';
import type { FeatureConfigurationClient } from '../../features/feature-toggle/types/feature-toggle-strategies-store-type.js';
import type { Segment } from './feature-evaluator/strategy/strategy.js';
import type { ISegment } from '../../types/model.js';
import type { FeatureInterface } from 'unleash-client/lib/feature.js';
type NonEmptyList<T> = [T, ...T[]];
export declare const mapFeaturesForClient: (features: FeatureConfigurationClient[]) => FeatureInterface[];
export declare const mapFeatureForClient: (feature: FeatureConfigurationClient) => FeatureInterface;
export declare const mapSegmentsForClient: (segments: ISegment[]) => Segment[];
export type ClientInitOptions = {
    features: NonEmptyList<FeatureConfigurationClient>;
    segments?: ISegment[];
    context: SdkContextSchema;
    logError: (message: any, ...args: any[]) => void;
};
export declare const offlineUnleashClient: ({ features, context, segments, }: ClientInitOptions) => Promise<FeatureEvaluator>;
export {};
//# sourceMappingURL=offline-unleash-client.d.ts.map