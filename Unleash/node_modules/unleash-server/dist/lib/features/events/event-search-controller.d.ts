import type { Response } from 'express';
import type { IUnleashConfig } from '../../types/option.js';
import type { IUnleashServices } from '../../services/index.js';
import { type EventSearchQueryParameters } from '../../openapi/spec/event-search-query-parameters.js';
import { type EventSearchResponseSchema } from '../../openapi/index.js';
import Controller from '../../routes/controller.js';
import type { IEnrichedEvent, IEvent } from '../../events/index.js';
import type { IAuthRequest } from '../../routes/unleash-types.js';
export default class EventSearchController extends Controller {
    private eventService;
    private flagResolver;
    private msgFormatter;
    private openApiService;
    constructor(config: IUnleashConfig, { eventService, openApiService, }: Pick<IUnleashServices, 'eventService' | 'openApiService'>);
    searchEvents(req: IAuthRequest<any, any, any, EventSearchQueryParameters>, res: Response<EventSearchResponseSchema>): Promise<void>;
    enrichEvents(events: IEvent[]): IEvent[] | IEnrichedEvent[];
    maybeAnonymiseEvents(events: IEvent[]): IEvent[];
}
//# sourceMappingURL=event-search-controller.d.ts.map