import type { ReleasePlan } from './release-plan.js';
import type { ReleasePlanMilestoneStrategy } from './release-plan-milestone-strategy.js';
import { CRUDStore, type CrudStoreConfig } from '../../db/crud/crud-store.js';
import type { Row } from '../../db/crud/row-type.js';
import type { Db } from '../../db/db.js';
import type { IAuditUser } from '../../types/index.js';
type ReleasePlanWriteModel = Omit<ReleasePlan, 'discriminator' | 'createdAt' | 'milestones'>;
export declare class ReleasePlanStore extends CRUDStore<ReleasePlan, ReleasePlanWriteModel, Row<ReleasePlan>, ReleasePlan, string> {
    constructor(db: Db, config: CrudStoreConfig);
    count(query?: Partial<ReleasePlanWriteModel>): Promise<number>;
    getByFeatureFlagEnvironmentAndPlanId(featureName: string, environment: string, planId: string): Promise<ReleasePlan>;
    getByPlanId(planId: string): Promise<ReleasePlan | undefined>;
    getByFeatureFlagAndEnvironment(featureName: string, environment: string): Promise<ReleasePlan[]>;
    activateStrategiesForMilestone(planId: string, auditUser: IAuditUser): Promise<ReleasePlanMilestoneStrategy[]>;
    deactivateStrategiesForMilestone(templateId: string): Promise<ReleasePlanMilestoneStrategy[]>;
    getActiveStrategiesForPlan(planId: string): Promise<ReleasePlanMilestoneStrategy[]>;
    activateStrategySegmentsForMilestone(milestone_id: string): Promise<number[]>;
    featureAndEnvironmentHasPlan(featureName: string, environment: string): Promise<boolean>;
}
export {};
//# sourceMappingURL=release-plan-store.d.ts.map