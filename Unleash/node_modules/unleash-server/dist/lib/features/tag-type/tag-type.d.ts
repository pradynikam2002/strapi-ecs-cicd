import type { Request, Response } from 'express';
import Controller from '../../routes/controller.js';
import type { IUnleashConfig } from '../../types/option.js';
import type { IUnleashServices } from '../../services/index.js';
import type { IAuthRequest } from '../../routes/unleash-types.js';
import type { TagTypesSchema } from '../../openapi/spec/tag-types-schema.js';
import { type ValidateTagTypeSchema } from '../../openapi/spec/validate-tag-type-schema.js';
import type { TagTypeSchema } from '../../openapi/spec/tag-type-schema.js';
import type { UpdateTagTypeSchema } from '../../openapi/spec/update-tag-type-schema.js';
declare class TagTypeController extends Controller {
    private logger;
    private tagTypeService;
    private openApiService;
    constructor(config: IUnleashConfig, { transactionalTagTypeService, openApiService, }: Pick<IUnleashServices, 'transactionalTagTypeService' | 'openApiService'>);
    getTagTypes(req: Request, res: Response<TagTypesSchema>): Promise<void>;
    validateTagType(req: Request<unknown, unknown, TagTypeSchema>, res: Response<ValidateTagTypeSchema>): Promise<void>;
    createTagType(req: IAuthRequest<unknown, unknown, TagTypeSchema>, res: Response): Promise<void>;
    updateTagType(req: IAuthRequest<{
        name: string;
    }, unknown, UpdateTagTypeSchema>, res: Response): Promise<void>;
    getTagType(req: Request, res: Response): Promise<void>;
    deleteTagType(req: IAuthRequest, res: Response): Promise<void>;
}
export default TagTypeController;
//# sourceMappingURL=tag-type.d.ts.map