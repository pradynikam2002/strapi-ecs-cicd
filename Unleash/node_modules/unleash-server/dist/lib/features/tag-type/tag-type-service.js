import NameExistsError from '../../error/name-exists-error.js';
import { tagTypeSchema } from '../../services/tag-type-schema.js';
import { TagTypeCreatedEvent, TagTypeDeletedEvent, TagTypeUpdatedEvent, } from '../../types/index.js';
import { NotFoundError } from '../../error/index.js';
export default class TagTypeService {
    constructor({ tagTypeStore }, { getLogger }, eventService) {
        this.tagTypeStore = tagTypeStore;
        this.eventService = eventService;
        this.logger = getLogger('services/tag-type-service.js');
    }
    async getAll() {
        return this.tagTypeStore.getAll();
    }
    async getTagType(name) {
        const tagType = await this.tagTypeStore.get(name);
        if (tagType === undefined) {
            throw new NotFoundError(`Tagtype ${name} could not be found`);
        }
        return tagType;
    }
    async createTagType(newTagType, auditUser) {
        const data = (await tagTypeSchema.validateAsync(newTagType));
        await this.validateUnique(data.name);
        await this.tagTypeStore.createTagType(data);
        await this.eventService.storeEvent(new TagTypeCreatedEvent({
            auditUser,
            data,
        }));
        return data;
    }
    async validateUnique(name) {
        const exists = await this.tagTypeStore.exists(name);
        if (exists) {
            throw new NameExistsError(`There already exists a tag-type with the name ${name}`);
        }
        return Promise.resolve(true);
    }
    async validate(tagType) {
        await tagTypeSchema.validateAsync(tagType);
        if (tagType?.name) {
            await this.validateUnique(tagType.name);
        }
    }
    async deleteTagType(name, auditUser) {
        const tagType = await this.tagTypeStore.get(name);
        await this.tagTypeStore.delete(name);
        await this.eventService.storeEvent(new TagTypeDeletedEvent({
            preData: tagType,
            auditUser,
        }));
    }
    async updateTagType(updatedTagType, auditUser) {
        const data = await tagTypeSchema.validateAsync(updatedTagType);
        await this.tagTypeStore.updateTagType(data);
        await this.eventService.storeEvent(new TagTypeUpdatedEvent({
            data,
            auditUser,
        }));
        return data;
    }
}
//# sourceMappingURL=tag-type-service.js.map