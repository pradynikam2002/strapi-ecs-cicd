import type { IUnleashStores } from '../../types/index.js';
import type { ProjectDoraMetricsSchema } from '../../openapi/index.js';
export declare class ProjectInsightsService {
    private projectStore;
    private featureToggleStore;
    private featureTypeStore;
    private featureStrategiesStore;
    private projectStatsStore;
    constructor({ projectStore, featureToggleStore, featureTypeStore, projectStatsStore, featureStrategiesStore, }: Pick<IUnleashStores, 'projectStore' | 'featureToggleStore' | 'projectStatsStore' | 'featureTypeStore' | 'featureStrategiesStore'>);
    getDoraMetrics(projectId: string): Promise<ProjectDoraMetricsSchema>;
    private getHealthInsights;
    private getProjectHealth;
    private getProjectMembers;
    getProjectInsights(projectId: string): Promise<{
        stats: import("../project/project-service.js").IProjectStats;
        featureTypeCounts: import("../../types/model.js").IFeatureTypeCount[];
        technicalDebt: {
            rating: number;
            activeCount: number;
            potentiallyStaleCount: number;
            staleCount: number;
        };
        leadTime: {
            projectAverage?: number | undefined;
            features: {
                name: string;
                timeToProduction: number;
            }[];
        };
        members: {
            [x: string]: unknown;
            currentMembers: number;
            change: number;
        };
        /**
         * @deprecated
         */
        health: {
            rating: number;
            activeCount: number;
            potentiallyStaleCount: number;
            staleCount: number;
        };
    }>;
}
//# sourceMappingURL=project-insights-service.d.ts.map