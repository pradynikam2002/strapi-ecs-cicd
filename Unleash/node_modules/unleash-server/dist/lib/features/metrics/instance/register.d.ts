import type { Response } from 'express';
import Controller from '../../../routes/controller.js';
import type { IFlagResolver } from '../../../types/index.js';
import type { IUnleashConfig } from '../../../types/option.js';
import type { Logger } from '../../../logger.js';
import type ClientInstanceService from './instance-service.js';
import type { IAuthRequest } from '../../../types/index.js';
import type { IUnleashServices, OpenApiService } from '../../../services/index.js';
import type { ClientApplicationSchema } from '../../../openapi/spec/client-application-schema.js';
export default class RegisterController extends Controller {
    logger: Logger;
    clientInstanceService: ClientInstanceService;
    openApiService: OpenApiService;
    flagResolver: IFlagResolver;
    constructor({ clientInstanceService, openApiService, }: Pick<IUnleashServices, 'clientInstanceService' | 'openApiService'>, config: IUnleashConfig);
    private resolveEnvironment;
    private resolveProject;
    registerClientApplication(req: IAuthRequest<unknown, void, ClientApplicationSchema>, res: Response<void>): Promise<void>;
}
//# sourceMappingURL=register.d.ts.map