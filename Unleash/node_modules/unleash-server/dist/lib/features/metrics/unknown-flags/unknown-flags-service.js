export class UnknownFlagsService {
    constructor({ unknownFlagsStore }, config) {
        this.unknownFlagsStore = unknownFlagsStore;
        this.flagResolver = config.flagResolver;
        this.logger = config.getLogger('/features/metrics/unknown-flags/unknown-flags-service.ts');
        this.unknownFlagsCache = new Map();
    }
    getKey(flag) {
        return `${flag.name}:${flag.appName}:${flag.environment}`;
    }
    register(unknownFlags) {
        if (!this.flagResolver.isEnabled('reportUnknownFlags'))
            return;
        for (const flag of unknownFlags) {
            const key = this.getKey(flag);
            this.unknownFlagsCache.set(key, flag);
        }
    }
    async flush() {
        if (!this.flagResolver.isEnabled('reportUnknownFlags'))
            return;
        if (this.unknownFlagsCache.size === 0)
            return;
        const cached = Array.from(this.unknownFlagsCache.values());
        cached.sort((a, b) => this.getKey(a).localeCompare(this.getKey(b)));
        await this.unknownFlagsStore.insert(cached);
        this.unknownFlagsCache.clear();
    }
    async getAll(queryParams) {
        if (!this.flagResolver.isEnabled('reportUnknownFlags'))
            return [];
        return this.unknownFlagsStore.getAll(queryParams);
    }
    async clear(hoursAgo) {
        if (!this.flagResolver.isEnabled('reportUnknownFlags'))
            return;
        return this.unknownFlagsStore.clear(hoursAgo);
    }
}
//# sourceMappingURL=unknown-flags-service.js.map