import type { FromSchema } from 'json-schema-to-ts';
export declare const patsSchema: {
    readonly $id: "#/components/schemas/patsSchema";
    readonly type: "object";
    readonly description: "Contains a collection of [personal access tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens), or PATs. PATs are automatically scoped to the authenticated user.";
    readonly properties: {
        readonly pats: {
            readonly type: "array";
            readonly description: "A collection of PATs.";
            readonly items: {
                readonly $ref: "#/components/schemas/patSchema";
            };
        };
    };
    readonly components: {
        readonly schemas: {
            readonly patSchema: {
                readonly $id: "#/components/schemas/patSchema";
                readonly type: "object";
                readonly description: "Describes a [personal access token](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens), or PAT. PATs are automatically scoped to the authenticated user.";
                readonly required: readonly ["id", "createdAt", "description", "expiresAt"];
                readonly properties: {
                    readonly description: {
                        readonly type: "string";
                        readonly description: "The PAT's description.";
                        readonly example: "user:xyzrandomstring";
                    };
                    readonly expiresAt: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly description: "The PAT's expiration date.";
                        readonly example: "2023-04-19T08:15:14.000Z";
                    };
                    readonly id: {
                        readonly type: "integer";
                        readonly description: "The PAT's ID. PAT IDs are incrementing integers. In other words, a more recently created PAT will always have a higher ID than an older one.";
                        readonly example: 1;
                        readonly minimum: 1;
                    };
                    readonly secret: {
                        readonly type: "string";
                        readonly description: "The token used for authentication. It is automatically generated by Unleash when the PAT is created and that is the only time this property is returned.";
                        readonly example: "user:xyzrandomstring";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly example: "2023-04-19T08:15:14.000Z";
                        readonly description: "The date and time of when the PAT was created.";
                    };
                    readonly seenAt: {
                        readonly type: "string";
                        readonly format: "date-time";
                        readonly nullable: true;
                        readonly example: "2023-04-19T08:15:14.000Z";
                        readonly description: "When the PAT was last seen/used to authenticate with. `null` if it has not been used yet.";
                    };
                    readonly userId: {
                        readonly type: "integer";
                        readonly description: "The ID of the user this PAT belongs to.";
                        readonly example: 1337;
                    };
                };
                readonly components: {
                    readonly schemas: {};
                };
            };
        };
    };
};
export type PatsSchema = FromSchema<typeof patsSchema>;
//# sourceMappingURL=pats-schema.d.ts.map