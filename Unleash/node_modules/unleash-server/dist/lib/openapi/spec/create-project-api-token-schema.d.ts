import type { FromSchema } from 'json-schema-to-ts';
export declare const createProjectApiTokenSchema: {
    readonly type: "object";
    readonly required: readonly ["tokenName", "type"];
    readonly $id: "#/components/schemas/createProjectApiTokenSchema";
    readonly description: "The schema for creating a project API token. This schema is used to create a new project API token.";
    readonly properties: {
        readonly type: {
            readonly type: "string";
            readonly pattern: "^([Cc][Ll][Ii][Ee][Nn][Tt]|[Ff][Rr][Oo][Nn][Tt][Ee][Nn][Dd])$";
            readonly description: "A client or frontend token. Must be one of the strings \"client\" or \"frontend\" (not case sensitive).";
            readonly example: "frontend";
        };
        readonly environment: {
            readonly type: "string";
            readonly description: "The environment that the token should be valid for. Defaults to \"default\".";
            readonly example: "development";
            readonly default: "default";
        };
        readonly expiresAt: {
            readonly type: "string";
            readonly description: "The date and time when the token should expire. The date should be in ISO 8601 format.";
            readonly example: "2023-10-01T00:00:00Z";
            readonly format: "date-time";
        };
        readonly tokenName: {
            readonly type: "string";
            readonly description: "A unique name for this particular token";
            readonly example: "some-user";
        };
    };
    readonly components: {};
};
export type CreateProjectApiTokenSchema = FromSchema<typeof createProjectApiTokenSchema>;
//# sourceMappingURL=create-project-api-token-schema.d.ts.map