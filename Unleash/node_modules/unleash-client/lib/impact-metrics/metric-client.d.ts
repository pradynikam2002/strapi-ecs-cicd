import { EventEmitter } from 'stream';
import { StaticContext, Unleash } from '../unleash';
import { ImpactMetricRegistry, MetricFlagContext } from './metric-types';
import Client from '../client';
export declare class MetricsAPI extends EventEmitter {
    private metricRegistry;
    private variantResolver;
    private staticContext;
    constructor(metricRegistry: ImpactMetricRegistry, variantResolver: Pick<Client, 'forceGetVariant'>, staticContext: StaticContext);
    defineCounter(name: string, help: string): void;
    defineGauge(name: string, help: string): void;
    private getFlagLabels;
    incrementCounter(name: string, value?: number, flagContext?: MetricFlagContext): void;
    updateGauge(name: string, value: number, flagContext?: MetricFlagContext): void;
}
export declare class UnleashMetricClient extends Unleash {
    impactMetrics: MetricsAPI;
    constructor(...args: ConstructorParameters<typeof Unleash>);
}
//# sourceMappingURL=metric-client.d.ts.map